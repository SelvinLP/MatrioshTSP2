/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,10],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[2,5,13,17,18,24,25,29,33,34,35,36,37],$Vc=[1,31],$Vd=[1,30],$Ve=[23,48,50],$Vf=[2,34],$Vg=[1,37],$Vh=[1,36],$Vi=[1,47],$Vj=[1,56],$Vk=[1,41],$Vl=[1,49],$Vm=[1,48],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[2,5,13,17,18,24,25,29,32,33,34,35,36,37],$Vu=[23,50],$Vv=[2,37],$Vw=[1,65],$Vx=[28,56],$Vy=[1,83],$Vz=[1,82],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,84],$VI=[1,85],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[23,28,38,44,46,56,57,58,59,60,61,62,63,64,65,66,67,68,69],$VO=[2,41],$VP=[1,100],$VQ=[23,28,38,44,46,56,57,58,59,64,65,66,67,68,69],$VR=[23,28,38,44,46,56,57,58,59,60,61,64,65,66,67,68,69],$VS=[23,28,38,56,57,66,67,68,69],$VT=[2,5,13,17,18,19,24,25,26,29,33,34,35,36,37,58,59,70,71,72,73,74,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LInstrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"Impresion":8,"Ift":9,"Whilet":10,"Dowhilet":11,"Fort":12,"Breakt":13,"BreakyContinuet":14,"Cuerpo":15,"{":16,"}":17,"tk_let":18,"tk_id":19,"Tipodeclaracion":20,"Posiblearray":21,"PosibleAsignacion":22,";":23,"tk_const":24,"tk_console":25,"(":26,"ListaExp":27,")":28,"tk_if":29,"Expresion":30,"Elset":31,"tk_else":32,"tk_while":33,"tk_do":34,"tk_for":35,"tk_break":36,"tk_continue":37,":":38,"tk_number":39,"tk_string":40,"tk_boolean":41,"tk_void":42,"tk_array":43,"<":44,"TipoDato":45,">":46,"arrayllaves":47,"[":48,"]":49,"=":50,"OpeTernario":51,"E_aritmetica":52,"E_relacional":53,"E_logica":54,"Factor":55,",":56,"?":57,"+":58,"-":59,"*":60,"/":61,"**":62,"%":63,">=":64,"<=":65,"==":66,"!=":67,"&&":68,"||":69,"!":70,"tk_entero":71,"tk_decimal":72,"tk_cadena":73,"tk_bool":74,"tk_null":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"Breakt",16:"{",17:"}",18:"tk_let",19:"tk_id",23:";",24:"tk_const",25:"tk_console",26:"(",28:")",29:"tk_if",32:"tk_else",33:"tk_while",34:"tk_do",35:"tk_for",36:"tk_break",37:"tk_continue",38:":",39:"tk_number",40:"tk_string",41:"tk_boolean",42:"tk_void",43:"tk_array",44:"<",46:">",48:"[",49:"]",50:"=",56:",",57:"?",58:"+",59:"-",60:"*",61:"/",62:"**",63:"%",64:">=",65:"<=",66:"==",67:"!=",68:"&&",69:"||",70:"!",71:"tk_entero",72:"tk_decimal",73:"tk_cadena",74:"tk_bool",75:"tk_null"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[15,3],[15,2],[15,1],[7,6],[7,6],[8,5],[9,6],[31,2],[31,2],[31,0],[10,5],[11,7],[12,8],[14,2],[14,2],[20,2],[20,2],[20,2],[20,2],[20,2],[20,5],[20,0],[20,1],[21,1],[21,0],[47,3],[47,2],[22,2],[22,0],[30,3],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[27,3],[27,1],[51,5],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,2],[52,2],[53,3],[53,3],[53,3],[53,3],[53,3],[53,3],[54,3],[54,3],[54,2],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:

        $$[$0-1].push($$[$0]); 
        this.$ = $$[$0-1];
    
break;
case 3: case 50:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 20: case 21: case 43: case 44: case 45: case 46: case 47:
this.$=$$[$0];
break;
case 12:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la Instruccion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 13:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 14:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 15:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en las llaves {} "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 16:

        this.$ = new Declaracion(TipoDato.LET, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 17:

        this.$ = new Declaracion(TipoDato.CONST, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 18:

        this.$ = new Imprimirt($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 19:

        this.$ = new Ifelse($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 23:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 24:

        this.$ = new Dowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 25:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 26:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 27:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 28:
 this.$ = new Tipo(Tipos.NUMBER); 
break;
case 29:
 this.$ = new Tipo(Tipos.STRING); 
break;
case 30:
 this.$ = new Tipo(Tipos.BOOLEAN); 
break;
case 31:
 this.$ = new Tipo(Tipos.NULL); 
break;
case 32:
 this.$ = new Tipo(Tipos.TYPE, $$[$0]); 
break;
case 33:
 this.$ = new Tipo(Tipos.ARRAY, $$[$0-1]); 
break;
case 35: case 80:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir tipo "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 36: case 40:
 this.$ = $$[$0]; 
break;
case 38: case 39:

    
break;
case 42:
this.$=$$[$0-1];
break;
case 48:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la expresion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 49:

        $$[$0-2].push($$[$0]); 
        this.$ = $$[$0-2];
    
break;
case 51:

        this.$ = new Opeternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 52:

        this.$ = new Mast($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 53:

        this.$ = new Menost($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 54:

        this.$ = new Mult($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 55:

        this.$ = new Divt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 56:

        this.$ = new Pott($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 57:

        this.$ = new Modt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 58:

        this.$ = new Unariot($$[$0], false, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 59:

        this.$ = new Unariot($$[$0], true, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 60:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 61:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 62:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 63:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 64:

        this.$ = new Igualt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 65:

        this.$ = new Notigualt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 66:

        this.$ = new Andt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 67:

        this.$ = new Ort($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 68:

        this.$ = new Nott($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 69: case 70:
 
        this.$ = new LPrimitivo($$[$0], Tipos.NUMBER, _$[$0].first_line, _$[$0].first_column);
    
break;
case 71:

        this.$ = new Cadenat($$[$0], Tipos.STRING, _$[$0].first_line, _$[$0].first_column);
    
break;
case 72:
 
        this.$ = new LPrimitivo($$[$0], Tipos.BOOLEAN, _$[$0].first_line, _$[$0].first_column);
    
break;
case 73:

        this.$ = new LPrimitivo($$[$0], Tipos.NULL, _$[$0].first_line, _$[$0].first_column);
    
break;
case 74:


    
break;
case 75:
this.$ = "number";
break;
case 76:
this.$ = "string";
break;
case 77:
this.$ = "boolean";
break;
case 78:
this.$ = "void";
break;
case 79:
this.$ = $$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,14:11,18:$V2,24:$V3,25:$V4,29:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va},{1:[3]},{2:$V0,5:[1,22],6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,14:11,18:$V2,24:$V3,25:$V4,29:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),{19:[1,24]},{19:[1,25]},{26:[1,26]},{26:[1,27]},{26:[1,28]},{2:$Vc,15:29,16:$Vd},{26:[1,32]},{23:[1,33]},{23:[1,34]},{1:[2,1]},o($Vb,[2,2]),o($Ve,$Vf,{20:35,2:$Vg,38:$Vh}),o($Ve,$Vf,{20:38,2:$Vg,38:$Vh}),{2:$Vi,19:$Vj,26:$Vk,27:39,30:40,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:57,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:58,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{33:[1,59]},{2:$V0,4:60,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,14:11,17:[1,61],18:$V2,24:$V3,25:$V4,29:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va},o($Vt,[2,15]),{7:62,18:$V2,24:$V3},o($Vb,[2,26]),o($Vb,[2,27]),o($Vu,$Vv,{21:63,47:64,48:$Vw}),{19:[1,70],39:[1,66],40:[1,67],41:[1,68],42:[1,69],43:[1,71]},o($Ve,[2,35]),o($Vu,$Vv,{47:64,21:72,48:$Vw}),{28:[1,73],56:[1,74]},o($Vx,[2,50],{44:$Vy,46:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM}),{2:$Vi,19:$Vj,26:$Vk,30:90,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},o($VN,[2,43]),o($VN,[2,44]),o($VN,[2,45]),o($VN,[2,46]),o($VN,[2,47]),o($VN,[2,48]),{2:$Vi,19:$Vj,26:$Vk,30:91,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:92,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:93,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},o($VN,[2,69]),o($VN,[2,70]),o($VN,[2,71]),o($VN,[2,72]),o($VN,[2,73]),o($VN,[2,74]),{28:[1,94],44:$Vy,46:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM},{28:[1,95],44:$Vy,46:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM},{26:[1,96]},{2:$V0,6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,14:11,17:[1,97],18:$V2,24:$V3,25:$V4,29:$V5,33:$V6,34:$V7,35:$V8,36:$V9,37:$Va},o($Vt,[2,14]),{2:$Vi,19:$Vj,26:$Vk,30:98,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{22:99,23:$VO,50:$VP},o($Vu,[2,36],{48:[1,101]}),{49:[1,102]},o($Ve,[2,28]),o($Ve,[2,29]),o($Ve,[2,30]),o($Ve,[2,31]),o($Ve,[2,32]),{44:[1,103]},{22:104,23:$VO,50:$VP},{23:[1,105]},{2:$Vi,19:$Vj,26:$Vk,30:106,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:107,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:108,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:109,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:110,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:111,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:112,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:113,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:114,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:115,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:116,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:117,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:118,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:119,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:120,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{2:$Vi,19:$Vj,26:$Vk,30:121,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{28:[1,122],44:$Vy,46:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM},o($VN,[2,58]),o($VN,[2,59]),o($VN,[2,68]),{2:$Vc,15:123,16:$Vd},{2:$Vc,15:124,16:$Vd},{2:$Vi,19:$Vj,26:$Vk,30:125,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},o($Vt,[2,13]),{23:[1,126],44:$Vy,46:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM},{23:[1,127]},{2:$Vi,19:$Vj,26:$Vk,30:128,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},{49:[1,129]},o($Ve,[2,39]),{2:[1,136],19:[1,135],39:[1,131],40:[1,132],41:[1,133],42:[1,134],45:130},{23:[1,137]},o($Vb,[2,18]),o($Vx,[2,49],{44:$Vy,46:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM}),{38:[1,138],44:$Vy,46:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM},o($VQ,[2,52],{60:$VD,61:$VE,62:$VF,63:$VG}),o($VQ,[2,53],{60:$VD,61:$VE,62:$VF,63:$VG}),o($VR,[2,54],{62:$VF,63:$VG}),o($VR,[2,55],{62:$VF,63:$VG}),o($VN,[2,56]),o($VN,[2,57]),o($VS,[2,60],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VS,[2,61],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VS,[2,62],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VS,[2,63],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VS,[2,64],{44:$Vy,46:$Vz,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o($VS,[2,65],{44:$Vy,46:$Vz,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o([23,28,38,56,57,68,69],[2,66],{44:$Vy,46:$Vz,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK}),o([23,28,38,56,57,69],[2,67],{44:$Vy,46:$Vz,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL}),o($VN,[2,42]),o($Vb,[2,22],{31:139,32:[1,140]}),o($Vb,[2,23]),{28:[1,141],44:$Vy,46:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM},{2:$Vi,19:$Vj,26:$Vk,30:142,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},o($VT,[2,16]),{23:[2,40],44:$Vy,46:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM},o($Ve,[2,38]),{46:[1,143]},{46:[2,75]},{46:[2,76]},{46:[2,77]},{46:[2,78]},{46:[2,79]},{46:[2,80]},o($VT,[2,17]),{2:$Vi,19:$Vj,26:$Vk,30:144,51:42,52:43,53:44,54:45,55:46,58:$Vl,59:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs},o($Vb,[2,19]),{2:$Vc,9:146,15:145,16:$Vd,29:$V5},{23:[1,147]},{28:[1,148],44:$Vy,46:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM},o($Ve,[2,33]),o([23,28,38,56,57],[2,51],{44:$Vy,46:$Vz,58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM}),o($Vb,[2,20]),o($Vb,[2,21]),o($Vb,[2,24]),{2:$Vc,15:149,16:$Vd},o($Vb,[2,25])],
defaultActions: {22:[2,1],131:[2,75],132:[2,76],133:[2,77],134:[2,78],135:[2,79],136:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const CL_Error = require('../build/Errores/L_Error');
    const CN_Error = require('../build/Errores/N_Error');
    const { LPrimitivo } = require('../build/Literal/Primitivo');
    const { Cadenat } = require('../build/Literal/Cadena');
    const { Tipos, Tipo, TipoDato, TipoRelacional } = require('../build/Otros/Tipos');
    const {Statement} = require('../build/Instrucciones/Statement');

    const { Mast } = require('../build/Expresiones/Aritmeticas/Mas');
    const { Menost } = require('../build/Expresiones/Aritmeticas/Menos');
    const { Mult } = require('../build/Expresiones/Aritmeticas/Mult');
    const { Divt } = require('../build/Expresiones/Aritmeticas/Div');
    const { Unariot } = require('../build/Expresiones/Aritmeticas/Unario');
    const { Modt } = require('../build/Expresiones/Aritmeticas/Mod');
    const { Pott } = require('../build/Expresiones/Aritmeticas/Potencia');

    const { MayoryMenort } = require('../build/Expresiones/Relacionales/MayoryMenor');
    const { Igualt } = require('../build/Expresiones/Relacionales/Igual');
    const { Notigualt } = require('../build/Expresiones/Relacionales/Notigual');
    const { Andt } = require('../build/Expresiones/Logicas/Andt');
    const { Nott } = require('../build/Expresiones/Logicas/Nott');
    const { Ort } = require('../build/Expresiones/Logicas/Ort');
    const {Opeternario} = require('../build/Expresiones/Opeternario');

    const { Declaracion } = require('../build/Instrucciones/Declaracion');
    const { Imprimirt } = require('../build/Instrucciones/Imprimir');
    const {Ifelse} = require('../build/Instrucciones/Ifelse');
    const {While} = require('../build/Instrucciones/While');
    const {Dowhile} = require('../build/Instrucciones/Dowhile');
    const {For} = require('../build/Instrucciones/For');

    const {Break} = require('../build/Instrucciones/Break');
    const {Continue} = require('../build/Instrucciones/Continue');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario de una linea
break;
case 2:/*Comentario multilinea*/
break;
case 3:return 18
break;
case 4:return 24
break;
case 5:return 40
break;
case 6:return 39
break;
case 7:return 41
break;
case 8:return 42
break;
case 9:return 75
break;
case 10:return 29
break;
case 11:return 32
break;
case 12:return 'tk_switch'
break;
case 13:return 'tk_case'
break;
case 14:return 'tk_default'
break;
case 15:return 33
break;
case 16:return 34
break;
case 17:return 35
break;
case 18:return 37
break;
case 19:return 'tk_return'
break;
case 20:return 36
break;
case 21:return 'tk_function'
break;
case 22:return 25
break;
case 23:return 'tk_graficar_ts'
break;
case 24:return 'tk_type'
break;
case 25:return 43
break;
case 26:return 'tk_push'
break;
case 27:return 'tk_pop'
break;
case 28:return 'tk_length'
break;
case 29:return 'tk_in'
break;
case 30:return 'tk_of'
break;
case 31:return 66
break;
case 32:return 67
break;
case 33:return 64
break;
case 34:return 46
break;
case 35:return 65
break;
case 36:return 44 
break;
case 37:return 68
break;
case 38:return 69
break;
case 39:return 70
break;
case 40:return '++'
break;
case 41:return '--'
break;
case 42:return 16
break;
case 43:return 17
break;
case 44:return 23
break;
case 45:return 50
break;
case 46:return 26
break;
case 47:return 28
break;
case 48:return 56
break;
case 49:return 38
break;
case 50:return '.'
break;
case 51:return 48
break;
case 52:return 49
break;
case 53:return 57
break;
case 54:return 74
break;
case 55:return 72
break;
case 56:return 71
break;
case 57: yy_.yytext = yy_.yytext.slice(1,-1).replace("\\n", "\n").replace("\\t", "\t").replace("\\r", "\r").replace("\\\\", "\\").replace("\\\"", "\""); return 73;
break;
case 58:return 19; 
break;
case 59:return 62
break;
case 60:return 58
break;
case 61:return 59
break;
case 62:return 60
break;
case 63:return 61
break;
case 64:return 63
break;
case 65: /*se ignoran*/ 
break;
case 66:  return 5;   
break;
case 67:CL_Error.L_Errores.push(new CN_Error.N_Error("Lexico",yy_.yytext,"",yy_.yylineno,yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:true|false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[\"|\']([^\"\n]|(\\"))*[\"|\'])/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}