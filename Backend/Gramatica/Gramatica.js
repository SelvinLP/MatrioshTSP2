/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,11],$V2=[1,18],$V3=[1,31],$V4=[1,19],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[2,5,14,22,23,24,29,35,39,42,43,44,46,49,51,52,53,54,104],$Vg=[1,39],$Vh=[1,45],$Vi=[1,44],$Vj=[1,60],$Vk=[1,71],$Vl=[1,53],$Vm=[1,62],$Vn=[1,61],$Vo=[1,63],$Vp=[1,66],$Vq=[1,67],$Vr=[1,68],$Vs=[1,69],$Vt=[1,72],$Vu=[1,73],$Vv=[31,33,34,66],$Vw=[2,63],$Vx=[28,31,68],$Vy=[2,58],$Vz=[1,77],$VA=[1,76],$VB=[2,5,14,22,23,24,29,35,39,41,42,43,44,46,49,51,52,53,54,104],$VC=[1,102],$VD=[1,101],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,103],$VM=[1,104],$VN=[1,105],$VO=[1,106],$VP=[1,107],$VQ=[1,108],$VR=[28,38,50,58,64,65,76,77,78,79,80,81,82,83,84,85,86,87,88],$VS=[28,38,50,58,64,65,66,76,77,78,79,80,81,82,83,84,85,86,87,88],$VT=[28,31],$VU=[2,65],$VV=[1,118],$VW=[1,128],$VX=[38,58],$VY=[1,159],$VZ=[2,61],$V_=[1,167],$V$=[1,183],$V01=[1,182],$V11=[28,38,50,58,64,65,76,77,78,83,84,85,86,87,88],$V21=[28,38,50,58,64,65,76,77,78,79,80,83,84,85,86,87,88],$V31=[28,38,50,58,76,85,86,87,88],$V41=[2,21,38,58,65],$V51=[2,5,14,22,23,24,29,35,36,39,42,43,44,46,49,51,52,53,54,77,78,89,97,98,99,100,102,103,104],$V61=[22,49,51],$V71=[1,239];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LInstrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"Asignacion":8,"Impresion":9,"Ift":10,"Whilet":11,"Dowhilet":12,"Fort":13,"Breakt":14,"Switcht":15,"BreakyContinuet":16,"Funciones":17,"Returnt":18,"Call":19,"Cuerpo":20,"{":21,"}":22,"tk_let":23,"tk_id":24,"Tipodeclaracion":25,"Posiblearray":26,"PosibleAsignacion":27,";":28,"tk_const":29,"Asigid":30,"=":31,"Expresion":32,"++":33,"--":34,"tk_console":35,"(":36,"ListaExp":37,")":38,"tk_if":39,"Elset":40,"tk_else":41,"tk_while":42,"tk_do":43,"tk_for":44,"incydecfor":45,"tk_switch":46,"Casos":47,"Posibledefault":48,"tk_case":49,":":50,"tk_default":51,"tk_break":52,"tk_continue":53,"tk_function":54,"PosibleParametrosFucnc":55,"TipoDato":56,"Parametros":57,",":58,"tk_number":59,"tk_string":60,"tk_boolean":61,"tk_void":62,"tk_array":63,"<":64,">":65,".":66,"arrayllaves":67,"[":68,"]":69,"OpeTernario":70,"E_aritmetica":71,"E_relacional":72,"E_logica":73,"Operastring":74,"Factor":75,"?":76,"+":77,"-":78,"*":79,"/":80,"**":81,"%":82,">=":83,"<=":84,"==":85,"!=":86,"&&":87,"||":88,"!":89,"AccesoId":90,"tk_toLowerCase":91,"tk_toUpperCase":92,"tk_concat":93,"onlycadena":94,"tk_charat":95,"tk_length":96,"tk_entero":97,"tk_decimal":98,"tk_bool":99,"tk_null":100,"Acceso":101,"tk_cadena":102,"AccessFunc":103,"tk_return":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"Breakt",21:"{",22:"}",23:"tk_let",24:"tk_id",28:";",29:"tk_const",31:"=",33:"++",34:"--",35:"tk_console",36:"(",38:")",39:"tk_if",41:"tk_else",42:"tk_while",43:"tk_do",44:"tk_for",46:"tk_switch",49:"tk_case",50:":",51:"tk_default",52:"tk_break",53:"tk_continue",54:"tk_function",58:",",59:"tk_number",60:"tk_string",61:"tk_boolean",62:"tk_void",63:"tk_array",64:"<",65:">",66:".",68:"[",69:"]",76:"?",77:"+",78:"-",79:"*",80:"/",81:"**",82:"%",83:">=",84:"<=",85:"==",86:"!=",87:"&&",88:"||",89:"!",91:"tk_toLowerCase",92:"tk_toUpperCase",93:"tk_concat",95:"tk_charat",96:"tk_length",97:"tk_entero",98:"tk_decimal",99:"tk_bool",100:"tk_null",102:"tk_cadena",103:"AccessFunc",104:"tk_return"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[20,3],[20,2],[20,1],[7,6],[7,6],[8,4],[8,3],[8,3],[9,5],[10,6],[40,2],[40,2],[40,0],[11,5],[12,7],[13,8],[45,2],[45,2],[15,8],[47,5],[47,4],[47,4],[47,3],[47,1],[48,3],[48,0],[16,2],[16,2],[17,7],[55,1],[55,0],[57,4],[57,2],[19,5],[25,2],[25,2],[25,2],[25,2],[25,2],[25,5],[25,0],[25,1],[27,2],[27,0],[30,3],[30,1],[26,1],[26,0],[67,3],[67,2],[32,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[37,3],[37,1],[70,5],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,2],[71,2],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[73,3],[73,3],[73,2],[74,5],[74,5],[74,6],[74,6],[74,6],[74,3],[74,6],[74,6],[74,5],[74,5],[74,6],[74,3],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[94,1],[101,1],[101,1],[90,3],[90,1],[56,2],[56,2],[56,2],[56,2],[56,1],[18,2],[18,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:

        $$[$0-1].push($$[$0]); 
        this.$ = $$[$0-1];
    
break;
case 3: case 77:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 28: case 29: case 64: case 69: case 70: case 71: case 72: case 73: case 74:
this.$=$$[$0];
break;
case 16:
this.$ = new Call($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 17:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la Instruccion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 18:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 19:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 20:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en las llaves {} "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 21:

        this.$ = new Declaracion(TipoDato.LET, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 22:

        this.$ = new Declaracion(TipoDato.CONST, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 23:

        this.$ = new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 24:

         this.$ = new Inct($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 25:

         this.$ = new Dect($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 26:

        this.$ = new Imprimirt($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 27:

        this.$ = new Ifelse($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 31:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 32:

        this.$ = new Dowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 33:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 34:

         this.$ = new Inct($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 35:

         this.$ = new Dect($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 36:

        this.$= new SwitchCase($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 37:

        $$[$0-4].push(new Case($$[$0-2],$$[$0]));
        this.$=$$[$0-4];
    
break;
case 38:

        $$[$0-3].push(new Case($$[$0-1],new Array()));
        this.$=$$[$0-3];
    
break;
case 39:

        this.$=[new Case($$[$0-2],$$[$0])];
    
break;
case 40:

        this.$=[new Case($$[$0-1],new Array())];
    
break;
case 41:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir case "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 42:

        this.$=$$[$0];
    
break;
case 44:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 45:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 46:

        this.$ = new Funciont($$[$0-5], $$[$0-3], $$[$0-1], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 47: case 112: case 113: case 115: case 116:

        this.$ = $$[$0];
    
break;
case 48:

        this.$ = [];
    
break;
case 49:

        this.$ = $$[$0-3];
        this.$.push(new Paramfunc($$[$0-1],$$[$0]));
    
break;
case 50:

        
        this.$ = [new Paramfunc($$[$0-1],$$[$0])];
    
break;
case 51:

        this.$ = new AssignmentFunc($$[$0-4],$$[$0-2],null,_$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 52: case 119:
 this.$ = new Tipo(Tipos.NUMBER); 
break;
case 53: case 120:
 this.$ = new Tipo(Tipos.STRING); 
break;
case 54: case 121:
 this.$ = new Tipo(Tipos.BOOLEAN); 
break;
case 55: case 122:
 this.$ = new Tipo(Tipos.NULL); 
break;
case 56:
 this.$ = new Tipo(Tipos.TYPE, $$[$0]); 
break;
case 57:
 this.$ = new Tipo(Tipos.ARRAY, $$[$0-1]); 
break;
case 59: case 123:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir tipo "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 60:
 this.$ = $$[$0]; 
break;
case 62:

        this.$ = new AsigId($$[$0],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:

        this.$ = new AsigId($$[$0],null,_$[$0].first_line,_$[$0].first_column);
    
break;
case 66:

        let valor=new L_Array(null,$$[$0-2]);
        this.$=[valor];
    
break;
case 67:

        this.$=[new L_Array(null,null)];
    
break;
case 68:
this.$=$$[$0-1];
break;
case 75:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la expresion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 76:

        $$[$0-2].push($$[$0]); 
        this.$ = $$[$0-2];
    
break;
case 78:

        this.$ = new Opeternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 79:

        this.$ = new Mast($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 80:

        this.$ = new Menost($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 81:

        this.$ = new Mult($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 82:

        this.$ = new Divt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 83:

        this.$ = new Pott($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 84:

        this.$ = new Modt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 85:

        this.$ = new Unariot($$[$0], false, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 86:

        this.$ = new Unariot($$[$0], true, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 87:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 88:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 89:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 90:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 91:

        this.$ = new Igualt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 92:

        this.$ = new Notigualt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 93:

        this.$ = new Andt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 94:

        this.$ = new Ort($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 95:

        this.$ = new Nott($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 96: case 105:

        this.$ = new Tolower($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 97: case 104:

        this.$ = new ToUpper($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 98: case 99: case 102: case 103:

        this.$ = new Concat($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 100:

        this.$ = new CharAt($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 101: case 107:

        this.$ = new StrLength($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 106:

        this.$ = new CharAt($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);;
    
break;
case 108: case 109:
 
        this.$ = new LPrimitivo($$[$0], Tipos.NUMBER, _$[$0].first_line, _$[$0].first_column);
    
break;
case 110:
 
        this.$ = new LPrimitivo($$[$0], Tipos.BOOLEAN, _$[$0].first_line, _$[$0].first_column);
    
break;
case 111:

        this.$ = new LPrimitivo($$[$0], Tipos.NULL, _$[$0].first_line, _$[$0].first_column);
    
break;
case 114:

        this.$ = new Cadenat($$[$0], Tipos.STRING, _$[$0].first_line, _$[$0].first_column);
    
break;
case 117:

        this.$ = new AccesoId($$[$0],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 118:

        this.$ = new AccesoId($$[$0],null,_$[$0].first_line,_$[$0].first_column);
    
break;
case 124:

        this.$=new Returnt(null,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 125:

        this.$=new Returnt($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,23:$V2,24:$V3,29:$V4,30:20,35:$V5,39:$V6,42:$V7,43:$V8,44:$V9,46:$Va,52:$Vb,53:$Vc,54:$Vd,104:$Ve},{1:[3]},{2:$V0,5:[1,32],6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,23:$V2,24:$V3,29:$V4,30:20,35:$V5,39:$V6,42:$V7,43:$V8,44:$V9,46:$Va,52:$Vb,53:$Vc,54:$Vd,104:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),{24:[1,34]},{24:[1,35]},{31:[1,36],33:[1,37],34:[1,38],66:$Vg},{36:[1,40]},{36:[1,41]},{36:[1,42]},{2:$Vh,20:43,21:$Vi},{36:[1,46]},{36:[1,47]},{28:[1,48]},{28:[1,49]},{24:[1,50]},{2:$Vj,24:$Vk,28:[1,51],32:52,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},o($Vv,$Vw,{36:[1,74]}),{1:[2,1]},o($Vf,[2,2]),o($Vx,$Vy,{25:75,2:$Vz,50:$VA}),o($Vx,$Vy,{25:78,2:$Vz,50:$VA}),{2:$Vj,24:$Vk,32:79,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{28:[1,80]},{28:[1,81]},{24:[1,82]},{2:$Vj,24:$Vk,32:84,36:$Vl,37:83,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:85,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:86,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{42:[1,87]},{2:$V0,4:88,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,22:[1,89],23:$V2,24:$V3,29:$V4,30:20,35:$V5,39:$V6,42:$V7,43:$V8,44:$V9,46:$Va,52:$Vb,53:$Vc,54:$Vd,104:$Ve},o($VB,[2,20]),{7:90,23:$V2,29:$V4},{2:$Vj,24:$Vk,32:91,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},o($Vf,[2,44]),o($Vf,[2,45]),{36:[1,92]},o($Vf,[2,124]),{28:[1,93],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},{2:$Vj,24:$Vk,32:109,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},o($VR,[2,69]),o($VR,[2,70]),o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,73]),o($VR,[2,74]),o($VR,[2,75]),{2:$Vj,24:$Vk,32:110,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:111,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:112,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},o($VR,[2,115],{66:[1,113]}),o($VR,[2,112],{66:[1,114]}),o($VR,[2,108]),o($VR,[2,109]),o($VR,[2,110]),o($VR,[2,111]),o($VR,[2,113]),o($VS,[2,118]),o($VS,[2,114]),o($VR,[2,116]),{2:$Vj,24:$Vk,32:84,36:$Vl,37:115,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},o($VT,$VU,{26:116,67:117,68:$VV}),{24:[1,123],59:[1,119],60:[1,120],61:[1,121],62:[1,122],63:[1,124]},o($Vx,[2,59]),o($VT,$VU,{67:117,26:125,68:$VV}),{28:[1,126],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},o($Vf,[2,24]),o($Vf,[2,25]),o($Vv,[2,62]),{38:[1,127],58:$VW},o($VX,[2,77],{64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ}),{38:[1,129],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},{38:[1,130],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},{36:[1,131]},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,22:[1,132],23:$V2,24:$V3,29:$V4,30:20,35:$V5,39:$V6,42:$V7,43:$V8,44:$V9,46:$Va,52:$Vb,53:$Vc,54:$Vd,104:$Ve},o($VB,[2,19]),{2:$Vj,24:$Vk,32:133,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{38:[1,134],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},{24:[1,137],38:[2,48],55:135,57:136},o($Vf,[2,125]),{2:$Vj,24:$Vk,32:138,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:139,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:140,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:141,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:142,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:143,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:144,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:145,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:146,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:147,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:148,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:149,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:150,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:151,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vj,24:$Vk,32:152,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{38:[1,153],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},o($VR,[2,85]),o($VR,[2,86]),o($VR,[2,95]),{24:$VY,91:[1,154],92:[1,155],93:[1,156],95:[1,157],96:[1,158]},{91:[1,162],92:[1,161],93:[1,160],95:[1,163],96:[1,164]},{38:[1,165],58:$VW},{27:166,28:$VZ,31:$V_},o($VT,[2,64],{68:[1,168]}),{69:[1,169]},o($Vx,[2,52]),o($Vx,[2,53]),o($Vx,[2,54]),o($Vx,[2,55]),o($Vx,[2,56]),{64:[1,170]},{27:171,28:$VZ,31:$V_},o($Vf,[2,23]),{28:[1,172]},{2:$Vj,24:$Vk,32:173,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{2:$Vh,20:174,21:$Vi},{2:$Vh,20:175,21:$Vi},{2:$Vj,24:$Vk,32:176,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},o($VB,[2,18]),{28:[1,177],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},{21:[1,178]},{38:[1,179]},{38:[2,47],58:[1,180]},{2:$V$,50:$V01,56:181},{50:[1,184],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},o($V11,[2,79],{79:$VH,80:$VI,81:$VJ,82:$VK}),o($V11,[2,80],{79:$VH,80:$VI,81:$VJ,82:$VK}),o($V21,[2,81],{81:$VJ,82:$VK}),o($V21,[2,82],{81:$VJ,82:$VK}),o($VR,[2,83]),o($VR,[2,84]),o($V31,[2,87],{77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($V31,[2,88],{77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($V31,[2,89],{77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($V31,[2,90],{77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK}),o($V31,[2,91],{64:$VC,65:$VD,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM}),o($V31,[2,92],{64:$VC,65:$VD,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM}),o([28,38,50,58,76,87,88],[2,93],{64:$VC,65:$VD,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO}),o([28,38,50,58,76,88],[2,94],{64:$VC,65:$VD,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP}),o($VR,[2,68]),{36:[1,185]},{36:[1,186]},{36:[1,187]},{36:[1,188]},o($VR,[2,101]),o($VS,[2,117]),{36:[1,189]},{36:[1,190]},{36:[1,191]},{36:[1,192]},o($VR,[2,107]),{28:[1,193]},{28:[1,194]},{2:$Vj,24:$Vk,32:195,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{69:[1,196]},o($Vx,[2,67]),{2:$V$,50:$V01,56:197},{28:[1,198]},o($Vf,[2,26]),o($VX,[2,76],{64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ}),o($Vf,[2,30],{40:199,41:[1,200]}),o($Vf,[2,31]),{38:[1,201],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},{24:[1,204],30:203,45:202},{2:[1,207],47:205,49:[1,206]},{2:$V$,50:$V01,56:208},{24:[1,209]},o($VX,[2,50]),{59:[1,210],60:[1,211],61:[1,212],62:[1,213]},o($V41,[2,123]),{2:$Vj,24:$Vk,32:214,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{38:[1,215]},{38:[1,216]},{24:$Vk,90:217,94:218,102:$Vt},{2:$Vj,24:$Vk,32:219,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{24:$Vk,90:220,94:221,102:$Vt},{38:[1,222]},{38:[1,223]},{2:$Vj,24:$Vk,32:224,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},o($Vf,[2,51]),o($V51,[2,21]),{28:[2,60],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},o($Vx,[2,66]),{65:[1,225]},o($V51,[2,22]),o($Vf,[2,27]),{2:$Vh,10:227,20:226,21:$Vi,39:$V6},{28:[1,228]},{38:[1,229]},{33:[1,230],34:[1,231],66:$Vg},o([33,34,66],$Vw),{22:[2,43],48:232,49:[1,233],51:[1,234]},{2:$Vj,24:$Vk,32:235,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},o($V61,[2,41]),{2:$Vh,20:236,21:$Vi},{2:$V$,50:$V01,56:237},o($V41,[2,119]),o($V41,[2,120]),o($V41,[2,121]),o($V41,[2,122]),o([28,38,50,58,76],[2,78],{64:$VC,65:$VD,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ}),o($VR,[2,96]),o($VR,[2,97]),{38:[1,238],66:$V71},{38:[1,240]},{38:[1,241],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},{38:[1,242],66:$V71},{38:[1,243]},o($VR,[2,104]),o($VR,[2,105]),{38:[1,244],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},o($Vx,[2,57]),o($Vf,[2,28]),o($Vf,[2,29]),o($Vf,[2,32]),{2:$Vh,20:245,21:$Vi},{38:[2,34]},{38:[2,35]},{22:[1,246]},{2:$Vj,24:$Vk,32:247,36:$Vl,70:54,71:55,72:56,73:57,74:58,75:59,77:$Vm,78:$Vn,89:$Vo,90:64,94:65,97:$Vp,98:$Vq,99:$Vr,100:$Vs,101:70,102:$Vt,103:$Vu},{50:[1,248]},{50:[1,249],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},o($Vf,[2,46]),o($VX,[2,49]),o($VR,[2,98]),{24:$VY},o($VR,[2,99]),o($VR,[2,100]),o($VR,[2,102]),o($VR,[2,103]),o($VR,[2,106]),o($Vf,[2,33]),o($Vf,[2,36]),{50:[1,250],64:$VC,65:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ},{2:$V0,4:251,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,23:$V2,24:$V3,29:$V4,30:20,35:$V5,39:$V6,42:$V7,43:$V8,44:$V9,46:$Va,52:$Vb,53:$Vc,54:$Vd,104:$Ve},o($V61,[2,40],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:12,16:13,17:14,18:15,19:16,30:20,4:252,2:$V0,14:$V1,23:$V2,24:$V3,29:$V4,35:$V5,39:$V6,42:$V7,43:$V8,44:$V9,46:$Va,52:$Vb,53:$Vc,54:$Vd,104:$Ve}),o($V61,[2,38],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:12,16:13,17:14,18:15,19:16,30:20,4:253,2:$V0,14:$V1,23:$V2,24:$V3,29:$V4,35:$V5,39:$V6,42:$V7,43:$V8,44:$V9,46:$Va,52:$Vb,53:$Vc,54:$Vd,104:$Ve}),{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,15:12,16:13,17:14,18:15,19:16,22:[2,42],23:$V2,24:$V3,29:$V4,30:20,35:$V5,39:$V6,42:$V7,43:$V8,44:$V9,46:$Va,52:$Vb,53:$Vc,54:$Vd,104:$Ve},o($V61,[2,39],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:12,16:13,17:14,18:15,19:16,30:20,6:33,2:$V0,14:$V1,23:$V2,24:$V3,29:$V4,35:$V5,39:$V6,42:$V7,43:$V8,44:$V9,46:$Va,52:$Vb,53:$Vc,54:$Vd,104:$Ve}),o($V61,[2,37],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,15:12,16:13,17:14,18:15,19:16,30:20,6:33,2:$V0,14:$V1,23:$V2,24:$V3,29:$V4,35:$V5,39:$V6,42:$V7,43:$V8,44:$V9,46:$Va,52:$Vb,53:$Vc,54:$Vd,104:$Ve})],
defaultActions: {32:[2,1],230:[2,34],231:[2,35]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const CL_Error = require('../build/Errores/L_Error');
    const CN_Error = require('../build/Errores/N_Error');
    const { LPrimitivo } = require('../build/Literal/Primitivo');
    const { Cadenat } = require('../build/Literal/Cadena');
    const { Tipos, Tipo, TipoDato, TipoRelacional } = require('../build/Otros/Tipos');
    const {Statement} = require('../build/Instrucciones/Statement');

    const { Mast } = require('../build/Expresiones/Aritmeticas/Mas');
    const { Menost } = require('../build/Expresiones/Aritmeticas/Menos');
    const { Mult } = require('../build/Expresiones/Aritmeticas/Mult');
    const { Divt } = require('../build/Expresiones/Aritmeticas/Div');
    const { Unariot } = require('../build/Expresiones/Aritmeticas/Unario');
    const { Modt } = require('../build/Expresiones/Aritmeticas/Mod');
    const { Pott } = require('../build/Expresiones/Aritmeticas/Potencia');
    const { AsigId } = require('../build/Expresiones/Asignaciones/Asigid');
    const { AccesoId } = require('../build/Expresiones/AccesoId');

    const { Tolower } = require('../build/Expresiones/Opestring/Tolower');
    const { ToUpper } = require('../build/Expresiones/Opestring/Toupper');
    const { Concat } = require('../build/Expresiones/Opestring/Concat');
    const { CharAt } = require('../build/Expresiones/Opestring/Charat');
    const { StrLength } = require('../build/Expresiones/Opestring/Strlength');

    const { MayoryMenort } = require('../build/Expresiones/Relacionales/MayoryMenor');
    const { Igualt } = require('../build/Expresiones/Relacionales/Igual');
    const { Notigualt } = require('../build/Expresiones/Relacionales/Notigual');
    const { Andt } = require('../build/Expresiones/Logicas/Andt');
    const { Nott } = require('../build/Expresiones/Logicas/Nott');
    const { Ort } = require('../build/Expresiones/Logicas/Ort');
    const {Opeternario} = require('../build/Expresiones/Opeternario');

    const { Declaracion } = require('../build/Instrucciones/Declaracion');
    const {Asignacion} = require('../build/Instrucciones/Asignacion');
    const { Imprimirt } = require('../build/Instrucciones/Imprimir');
    const {Ifelse} = require('../build/Instrucciones/Ifelse');
    const {While} = require('../build/Instrucciones/While');
    const {Dowhile} = require('../build/Instrucciones/Dowhile');
    const {For} = require('../build/Instrucciones/For');
    const { SwitchCase, Case } = require('../build/Instrucciones/Switch');

    const { Paramfunc } = require('../build/Instrucciones/Funciones/Parametrosfunc');
    const { Funciont } = require('../build/Instrucciones/Funciones/Funciont');

    const {Break} = require('../build/Instrucciones/Break');
    const {Continue} = require('../build/Instrucciones/Continue');
    const { Inct } = require('../build/Instrucciones/IncyDec/Inc');
    const { Dect } = require('../build/Instrucciones/IncyDec/Dec');
    const {Returnt} = require('../build/Instrucciones/Returnt');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario de una linea
break;
case 2:/*Comentario multilinea*/
break;
case 3:return 23
break;
case 4:return 29
break;
case 5:return 60
break;
case 6:return 59
break;
case 7:return 61
break;
case 8:return 62
break;
case 9:return 100
break;
case 10:return 39
break;
case 11:return 41
break;
case 12:return 46
break;
case 13:return 49
break;
case 14:return 51
break;
case 15:return 42
break;
case 16:return 43
break;
case 17:return 44
break;
case 18:return 53
break;
case 19:return 104
break;
case 20:return 52
break;
case 21:return 54
break;
case 22:return 35
break;
case 23:return 'tk_graficar_ts'
break;
case 24:return 'tk_type'
break;
case 25:return 63
break;
case 26:return 'tk_push'
break;
case 27:return 'tk_pop'
break;
case 28:return 96
break;
case 29:return 'tk_in'
break;
case 30:return 'tk_of'
break;
case 31:return 91
break;
case 32:return 92
break;
case 33:return 93
break;
case 34:return 95
break;
case 35:return 85
break;
case 36:return 86
break;
case 37:return 83
break;
case 38:return 65
break;
case 39:return 84
break;
case 40:return 64 
break;
case 41:return 87
break;
case 42:return 88
break;
case 43:return 89
break;
case 44:return 33
break;
case 45:return 34
break;
case 46:return 21
break;
case 47:return 22
break;
case 48:return 28
break;
case 49:return 31
break;
case 50:return 36
break;
case 51:return 38
break;
case 52:return 58
break;
case 53:return 50
break;
case 54:return 66
break;
case 55:return 68
break;
case 56:return 69
break;
case 57:return 76
break;
case 58:return 99
break;
case 59:return 98
break;
case 60:return 97
break;
case 61: yy_.yytext = yy_.yytext.slice(1,-1).replace(/\\n/g, "\n").replace(/\\t/g, "\t").replace(/\\r/g, "\r").replace(/\\\\/g, "\\").replace(/\\\"/g, "\""); return 102;
break;
case 62:return 24; 
break;
case 63:return 81
break;
case 64:return 77
break;
case 65:return 78
break;
case 66:return 79
break;
case 67:return 80
break;
case 68:return 82
break;
case 69: /*se ignoran*/ 
break;
case 70:  return 5;   
break;
case 71:CL_Error.L_Errores.push(new CN_Error.N_Error("Lexico",yy_.yytext,"",yy_.yylineno,yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:toLowerCase\b)/,/^(?:toUpperCase\b)/,/^(?:concat\b)/,/^(?:charAt\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:true|false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[\"|\']([^\"\n]|(\\"))*[\"|\'])/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}