/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,13],$V2=[1,20],$V3=[1,33],$V4=[1,21],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[2,5,16,25,26,27,31,37,41,44,45,46,50,53,55,56,57,58,108],$Vg=[1,42],$Vh=[1,48],$Vi=[1,47],$Vj=[1,63],$Vk=[1,74],$Vl=[1,56],$Vm=[1,65],$Vn=[1,64],$Vo=[1,66],$Vp=[1,69],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,75],$Vu=[33,35,36,70],$Vv=[2,69],$Vw=[1,78],$Vx=[22,33,72],$Vy=[2,64],$Vz=[1,81],$VA=[1,80],$VB=[2,5,16,25,26,27,31,37,41,43,44,45,46,50,53,55,56,57,58,108],$VC=[1,108],$VD=[1,107],$VE=[1,100],$VF=[1,101],$VG=[1,102],$VH=[1,103],$VI=[1,104],$VJ=[1,105],$VK=[1,106],$VL=[1,109],$VM=[1,110],$VN=[1,111],$VO=[1,112],$VP=[1,113],$VQ=[1,114],$VR=[22,40,54,62,68,69,80,81,82,83,84,85,86,87,88,89,90,91,92],$VS=[22,40,54,62,68,69,70,80,81,82,83,84,85,86,87,88,89,90,91,92],$VT=[2,124],$VU=[22,33],$VV=[2,71],$VW=[1,124],$VX=[1,134],$VY=[40,62],$VZ=[1,167],$V_=[2,67],$V$=[1,175],$V01=[1,195],$V11=[1,194],$V21=[22,40,54,62,68,69,80,81,82,87,88,89,90,91,92],$V31=[22,40,54,62,68,69,80,81,82,83,84,87,88,89,90,91,92],$V41=[22,40,54,62,80,89,90,91,92],$V51=[2,24,40,62,69],$V61=[1,234],$V71=[2,5,16,25,26,27,31,37,38,41,44,45,46,50,53,55,56,57,58,81,82,93,101,102,103,104,106,108],$V81=[25,53,55],$V91=[1,259];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"LInstrucciones":4,"EOF":5,"Instruccion":6,"Declaracion":7,"Asignacion":8,"Impresion":9,"Ift":10,"Whilet":11,"Dowhilet":12,"Fort":13,"Forint":14,"Foroft":15,"Breakt":16,"Switcht":17,"BreakyContinuet":18,"Funciones":19,"Returnt":20,"Call":21,";":22,"Cuerpo":23,"{":24,"}":25,"tk_let":26,"tk_id":27,"Tipodeclaracion":28,"Posiblearray":29,"PosibleAsignacion":30,"tk_const":31,"Asigid":32,"=":33,"Expresion":34,"++":35,"--":36,"tk_console":37,"(":38,"ListaExp":39,")":40,"tk_if":41,"Elset":42,"tk_else":43,"tk_while":44,"tk_do":45,"tk_for":46,"incydecfor":47,"tk_in":48,"tk_of":49,"tk_switch":50,"Casos":51,"Posibledefault":52,"tk_case":53,":":54,"tk_default":55,"tk_break":56,"tk_continue":57,"tk_function":58,"PosibleParametrosFucnc":59,"TipoDato":60,"Parametros":61,",":62,"tk_number":63,"tk_string":64,"tk_boolean":65,"tk_void":66,"tk_array":67,"<":68,">":69,".":70,"arrayllaves":71,"[":72,"]":73,"OpeTernario":74,"E_aritmetica":75,"E_relacional":76,"E_logica":77,"Operastring":78,"Factor":79,"?":80,"+":81,"-":82,"*":83,"/":84,"**":85,"%":86,">=":87,"<=":88,"==":89,"!=":90,"&&":91,"||":92,"!":93,"AccesoId":94,"tk_toLowerCase":95,"tk_toUpperCase":96,"tk_concat":97,"onlycadena":98,"tk_charat":99,"tk_length":100,"tk_entero":101,"tk_decimal":102,"tk_bool":103,"tk_null":104,"Acceso":105,"tk_cadena":106,"AccessFunc":107,"tk_return":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"Breakt",22:";",24:"{",25:"}",26:"tk_let",27:"tk_id",31:"tk_const",33:"=",35:"++",36:"--",37:"tk_console",38:"(",40:")",41:"tk_if",43:"tk_else",44:"tk_while",45:"tk_do",46:"tk_for",48:"tk_in",49:"tk_of",50:"tk_switch",53:"tk_case",54:":",55:"tk_default",56:"tk_break",57:"tk_continue",58:"tk_function",62:",",63:"tk_number",64:"tk_string",65:"tk_boolean",66:"tk_void",67:"tk_array",68:"<",69:">",70:".",72:"[",73:"]",80:"?",81:"+",82:"-",83:"*",84:"/",85:"**",86:"%",87:">=",88:"<=",89:"==",90:"!=",91:"&&",92:"||",93:"!",95:"tk_toLowerCase",96:"tk_toUpperCase",97:"tk_concat",99:"tk_charat",100:"tk_length",101:"tk_entero",102:"tk_decimal",103:"tk_bool",104:"tk_null",106:"tk_cadena",108:"tk_return"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[23,3],[23,2],[23,1],[7,6],[7,6],[8,4],[8,3],[8,3],[9,5],[10,6],[42,2],[42,2],[42,0],[11,5],[12,7],[13,8],[14,8],[14,8],[15,8],[15,8],[47,2],[47,2],[17,8],[51,5],[51,4],[51,4],[51,3],[51,1],[52,3],[52,0],[18,2],[18,2],[19,7],[59,1],[59,0],[61,4],[61,2],[21,4],[28,2],[28,2],[28,2],[28,2],[28,2],[28,5],[28,0],[28,1],[30,2],[30,0],[32,3],[32,1],[29,1],[29,0],[71,3],[71,2],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[39,3],[39,1],[74,5],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[75,2],[75,2],[76,3],[76,3],[76,3],[76,3],[76,3],[76,3],[77,3],[77,3],[77,2],[78,5],[78,5],[78,6],[78,6],[78,6],[78,3],[78,6],[78,6],[78,5],[78,5],[78,6],[78,3],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[98,1],[105,1],[105,1],[94,3],[94,1],[107,1],[60,2],[60,2],[60,2],[60,2],[60,1],[20,2],[20,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:

        $$[$0-1].push($$[$0]); 
        this.$ = $$[$0-1];
    
break;
case 3: case 83:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 30: case 31: case 70: case 75: case 76: case 77: case 78: case 79: case 80:
this.$=$$[$0];
break;
case 18:
this.$ = new Llamarfuncion($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 19:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la Instruccion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 20:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 21:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 22:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en las llaves {} "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 23:

        this.$ = new Declaracion(TipoDato.LET, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 24:

        this.$ = new Declaracion(TipoDato.CONST, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 25:

        this.$ = new Asignacion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 26:

         this.$ = new Inct($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 27:

         this.$ = new Dect($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 28:

        this.$ = new Imprimirt($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 29:

        this.$ = new Ifelse($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 33:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 34:

        this.$ = new Dowhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 35:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 36: case 37:

        //this.$ = new Forin(TipoDato.LET, $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 38: case 39:

        //this.$ = new Forof(TipoDato.LET, $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 40:

         this.$ = new Inct($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 41:

         this.$ = new Dect($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 42:

        this.$= new SwitchCase($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 43:

        $$[$0-4].push(new Case($$[$0-2],$$[$0]));
        this.$=$$[$0-4];
    
break;
case 44:

        $$[$0-3].push(new Case($$[$0-1],new Array()));
        this.$=$$[$0-3];
    
break;
case 45:

        this.$=[new Case($$[$0-2],$$[$0])];
    
break;
case 46:

        this.$=[new Case($$[$0-1],new Array())];
    
break;
case 47:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir case "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 48:

        this.$=$$[$0];
    
break;
case 50:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 51:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 52:

        this.$ = new Funciont($$[$0-5], $$[$0-3], $$[$0-1], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 53: case 118: case 119: case 121: case 122: case 125:

        this.$ = $$[$0];
    
break;
case 54:

        this.$ = [];
    
break;
case 55:

        this.$ = $$[$0-3];
        this.$.push(new Paramfunc($$[$0-1],$$[$0]));
    
break;
case 56:

        
        this.$ = [new Paramfunc($$[$0-1],$$[$0])];
    
break;
case 57:

        this.$ = new ExpFunc($$[$0-3],$$[$0-1],null,_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 58: case 126:
 this.$ = new Tipo(Tipos.NUMBER); 
break;
case 59: case 127:
 this.$ = new Tipo(Tipos.STRING); 
break;
case 60: case 128:
 this.$ = new Tipo(Tipos.BOOLEAN); 
break;
case 61: case 129:
 this.$ = new Tipo(Tipos.NULL); 
break;
case 62:
 this.$ = new Tipo(Tipos.TYPE, $$[$0]); 
break;
case 63:
 this.$ = new Tipo(Tipos.ARRAY, $$[$0-1]); 
break;
case 65: case 130:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error al definir tipo "+yytext,"",this._$.first_line,this._$.first_column))
break;
case 66:
 this.$ = $$[$0]; 
break;
case 68:

        this.$ = new AsigId($$[$0],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 69:

        this.$ = new AsigId($$[$0],null,_$[$0].first_line,_$[$0].first_column);
    
break;
case 72:

        let valor=new L_Array(null,$$[$0-2]);
        this.$=[valor];
    
break;
case 73:

        this.$=[new L_Array(null,null)];
    
break;
case 74:
this.$=$$[$0-1];
break;
case 81:
CL_Error.L_Errores.push(new CN_Error.N_Error("Sintactico","Error en la expresion "+yytext,"",this._$.first_line,this._$.first_column));
break;
case 82:

        $$[$0-2].push($$[$0]); 
        this.$ = $$[$0-2];
    
break;
case 84:

        this.$ = new Opeternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 85:

        this.$ = new Mast($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 86:

        this.$ = new Menost($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 87:

        this.$ = new Mult($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 88:

        this.$ = new Divt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 89:

        this.$ = new Pott($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 90:

        this.$ = new Modt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 91:

        this.$ = new Unariot($$[$0], false, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 92:

        this.$ = new Unariot($$[$0], true, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 93:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 94:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 95:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 96:

        this.$ = new MayoryMenort($$[$0-2], $$[$0], TipoRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 97:

        this.$ = new Igualt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 98:

        this.$ = new Notigualt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 99:

        this.$ = new Andt($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 100:

        this.$ = new Ort($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 101:

        this.$ = new Nott($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 102: case 111:

        this.$ = new Tolower($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 103: case 110:

        this.$ = new ToUpper($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 104: case 105: case 108: case 109:

        this.$ = new Concat($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 106:

        this.$ = new CharAt($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 107: case 113:

        this.$ = new StrLength($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 112:

        this.$ = new CharAt($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);;
    
break;
case 114: case 115:
 
        this.$ = new LPrimitivo($$[$0], Tipos.NUMBER, _$[$0].first_line, _$[$0].first_column);
    
break;
case 116:
 
        this.$ = new LPrimitivo($$[$0], Tipos.BOOLEAN, _$[$0].first_line, _$[$0].first_column);
    
break;
case 117:

        this.$ = new LPrimitivo($$[$0], Tipos.NULL, _$[$0].first_line, _$[$0].first_column);
    
break;
case 120:

        this.$ = new Cadenat($$[$0], Tipos.STRING, _$[$0].first_line, _$[$0].first_column);
    
break;
case 123:

        this.$ = new AccesoId($$[$0],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 124:

        this.$ = new AccesoId($$[$0],null,_$[$0].first_line,_$[$0].first_column);
    
break;
case 131:

        this.$=new Returnt(null,_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 132:

        this.$=new Returnt($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:14,18:15,19:16,20:17,21:18,26:$V2,27:$V3,31:$V4,32:22,37:$V5,41:$V6,44:$V7,45:$V8,46:$V9,50:$Va,56:$Vb,57:$Vc,58:$Vd,108:$Ve},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:14,18:15,19:16,20:17,21:18,26:$V2,27:$V3,31:$V4,32:22,37:$V5,41:$V6,44:$V7,45:$V8,46:$V9,50:$Va,56:$Vb,57:$Vc,58:$Vd,108:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),{22:[1,36]},o($Vf,[2,19]),{27:[1,37]},{27:[1,38]},{33:[1,39],35:[1,40],36:[1,41],70:$Vg},{38:[1,43]},{38:[1,44]},{38:[1,45]},{2:$Vh,23:46,24:$Vi},{38:[1,49]},{38:[1,50]},{22:[1,51]},{22:[1,52]},{27:[1,53]},{2:$Vj,21:77,22:[1,54],27:$Vk,34:55,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},o($Vu,$Vv,{38:$Vw}),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,18]),o($Vx,$Vy,{28:79,2:$Vz,54:$VA}),o($Vx,$Vy,{28:82,2:$Vz,54:$VA}),{2:$Vj,21:77,27:$Vk,34:83,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{22:[1,84]},{22:[1,85]},{27:[1,86]},{2:$Vj,21:77,27:$Vk,34:88,38:$Vl,39:87,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:89,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:90,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{44:[1,91]},{2:$V0,4:92,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:14,18:15,19:16,20:17,21:18,25:[1,93],26:$V2,27:$V3,31:$V4,32:22,37:$V5,41:$V6,44:$V7,45:$V8,46:$V9,50:$Va,56:$Vb,57:$Vc,58:$Vd,108:$Ve},o($VB,[2,22]),{7:94,26:[1,95],31:[1,96]},{2:$Vj,21:77,27:$Vk,34:97,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},o($Vf,[2,50]),o($Vf,[2,51]),{38:[1,98]},o($Vf,[2,131]),{22:[1,99],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},{2:$Vj,21:77,27:$Vk,34:115,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},o($VR,[2,75]),o($VR,[2,76]),o($VR,[2,77]),o($VR,[2,78]),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),{2:$Vj,21:77,27:$Vk,34:116,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:117,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:118,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},o($VR,[2,121],{70:[1,119]}),o($VR,[2,118],{70:[1,120]}),o($VR,[2,114]),o($VR,[2,115]),o($VR,[2,116]),o($VR,[2,117]),o($VR,[2,119]),o($VS,$VT,{38:$Vw}),o($VS,[2,120]),o($VR,[2,122]),o($VR,[2,125]),{2:$Vj,21:77,27:$Vk,34:88,38:$Vl,39:121,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},o($VU,$VV,{29:122,71:123,72:$VW}),{27:[1,129],63:[1,125],64:[1,126],65:[1,127],66:[1,128],67:[1,130]},o($Vx,[2,65]),o($VU,$VV,{71:123,29:131,72:$VW}),{22:[1,132],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},o($Vf,[2,26]),o($Vf,[2,27]),o($Vu,[2,68]),{40:[1,133],62:$VX},o($VY,[2,83],{68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ}),{40:[1,135],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},{40:[1,136],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},{38:[1,137]},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:14,18:15,19:16,20:17,21:18,25:[1,138],26:$V2,27:$V3,31:$V4,32:22,37:$V5,41:$V6,44:$V7,45:$V8,46:$V9,50:$Va,56:$Vb,57:$Vc,58:$Vd,108:$Ve},o($VB,[2,21]),{2:$Vj,21:77,27:$Vk,34:139,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{27:[1,140]},{27:[1,141]},{40:[1,142],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},{27:[1,145],40:[2,54],59:143,61:144},o($Vf,[2,132]),{2:$Vj,21:77,27:$Vk,34:146,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:147,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:148,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:149,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:150,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:151,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:152,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:153,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:154,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:155,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:156,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:157,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:158,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:159,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vj,21:77,27:$Vk,34:160,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{40:[1,161],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},o($VR,[2,91]),o($VR,[2,92]),o($VR,[2,101]),{27:$VZ,95:[1,162],96:[1,163],97:[1,164],99:[1,165],100:[1,166]},{95:[1,170],96:[1,169],97:[1,168],99:[1,171],100:[1,172]},{40:[1,173],62:$VX},{22:$V_,30:174,33:$V$},o($VU,[2,70],{72:[1,176]}),{73:[1,177]},o($Vx,[2,58]),o($Vx,[2,59]),o($Vx,[2,60]),o($Vx,[2,61]),o($Vx,[2,62]),{68:[1,178]},{22:$V_,30:179,33:$V$},o($Vf,[2,25]),{22:[1,180]},{2:$Vj,21:77,27:$Vk,34:181,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{2:$Vh,23:182,24:$Vi},{2:$Vh,23:183,24:$Vi},{2:$Vj,21:77,27:$Vk,34:184,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},o($VB,[2,20]),{22:[1,185],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},o($Vx,$Vy,{28:79,2:$Vz,48:[1,186],49:[1,187],54:$VA}),o($Vx,$Vy,{28:82,2:$Vz,48:[1,188],49:[1,189],54:$VA}),{24:[1,190]},{40:[1,191]},{40:[2,53],62:[1,192]},{2:$V01,54:$V11,60:193},{54:[1,196],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},o($V21,[2,85],{83:$VH,84:$VI,85:$VJ,86:$VK}),o($V21,[2,86],{83:$VH,84:$VI,85:$VJ,86:$VK}),o($V31,[2,87],{85:$VJ,86:$VK}),o($V31,[2,88],{85:$VJ,86:$VK}),o($VR,[2,89]),o($VR,[2,90]),o($V41,[2,93],{81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK}),o($V41,[2,94],{81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK}),o($V41,[2,95],{81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK}),o($V41,[2,96],{81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK}),o($V41,[2,97],{68:$VC,69:$VD,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o($V41,[2,98],{68:$VC,69:$VD,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM}),o([22,40,54,62,80,91,92],[2,99],{68:$VC,69:$VD,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO}),o([22,40,54,62,80,92],[2,100],{68:$VC,69:$VD,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP}),o($VR,[2,74]),{38:[1,197]},{38:[1,198]},{38:[1,199]},{38:[1,200]},o($VR,[2,107]),o($VS,[2,123]),{38:[1,201]},{38:[1,202]},{38:[1,203]},{38:[1,204]},o($VR,[2,113]),o($VR,[2,57]),{22:[1,205]},{2:$Vj,21:77,27:$Vk,34:206,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{73:[1,207]},o($Vx,[2,73]),{2:$V01,54:$V11,60:208},{22:[1,209]},o($Vf,[2,28]),o($VY,[2,82],{68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ}),o($Vf,[2,32],{42:210,43:[1,211]}),o($Vf,[2,33]),{40:[1,212],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},{27:[1,215],32:214,47:213},{27:[1,216]},{27:[1,217]},{27:[1,218]},{27:[1,219]},{2:[1,222],51:220,53:[1,221]},{2:$V01,54:$V11,60:223},{27:[1,224]},o($VY,[2,56]),{63:[1,225],64:[1,226],65:[1,227],66:[1,228]},o($V51,[2,130]),{2:$Vj,21:77,27:$Vk,34:229,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{40:[1,230]},{40:[1,231]},{27:$V61,94:232,98:233,106:$Vt},{2:$Vj,21:77,27:$Vk,34:235,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{27:$V61,94:236,98:237,106:$Vt},{40:[1,238]},{40:[1,239]},{2:$Vj,21:77,27:$Vk,34:240,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},o($V71,[2,23]),{22:[2,66],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},o($Vx,[2,72]),{69:[1,241]},o($V71,[2,24]),o($Vf,[2,29]),{2:$Vh,10:243,23:242,24:$Vi,41:$V6},{22:[1,244]},{40:[1,245]},{35:[1,246],36:[1,247],70:$Vg},o([35,36,70],$Vv),{40:[1,248]},{40:[1,249]},{40:[1,250]},{40:[1,251]},{25:[2,49],52:252,53:[1,253],55:[1,254]},{2:$Vj,21:77,27:$Vk,34:255,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},o($V81,[2,47]),{2:$Vh,23:256,24:$Vi},{2:$V01,54:$V11,60:257},o($V51,[2,126]),o($V51,[2,127]),o($V51,[2,128]),o($V51,[2,129]),o([22,40,54,62,80],[2,84],{68:$VC,69:$VD,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ}),o($VR,[2,102]),o($VR,[2,103]),{40:[1,258],70:$V91},{40:[1,260]},o([40,70],$VT),{40:[1,261],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},{40:[1,262],70:$V91},{40:[1,263]},o($VR,[2,110]),o($VR,[2,111]),{40:[1,264],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},o($Vx,[2,63]),o($Vf,[2,30]),o($Vf,[2,31]),o($Vf,[2,34]),{2:$Vh,23:265,24:$Vi},{40:[2,40]},{40:[2,41]},{2:$Vh,23:266,24:$Vi},{2:$Vh,23:267,24:$Vi},{2:$Vh,23:268,24:$Vi},{2:$Vh,23:269,24:$Vi},{25:[1,270]},{2:$Vj,21:77,27:$Vk,34:271,38:$Vl,74:57,75:58,76:59,77:60,78:61,79:62,81:$Vm,82:$Vn,93:$Vo,94:67,98:68,101:$Vp,102:$Vq,103:$Vr,104:$Vs,105:73,106:$Vt,107:76},{54:[1,272]},{54:[1,273],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},o($Vf,[2,52]),o($VY,[2,55]),o($VR,[2,104]),{27:$VZ},o($VR,[2,105]),o($VR,[2,106]),o($VR,[2,108]),o($VR,[2,109]),o($VR,[2,112]),o($Vf,[2,35]),o($Vf,[2,36]),o($Vf,[2,38]),o($Vf,[2,37]),o($Vf,[2,39]),o($Vf,[2,42]),{54:[1,274],68:$VC,69:$VD,80:$VE,81:$VF,82:$VG,83:$VH,84:$VI,85:$VJ,86:$VK,87:$VL,88:$VM,89:$VN,90:$VO,91:$VP,92:$VQ},{2:$V0,4:275,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:14,18:15,19:16,20:17,21:18,26:$V2,27:$V3,31:$V4,32:22,37:$V5,41:$V6,44:$V7,45:$V8,46:$V9,50:$Va,56:$Vb,57:$Vc,58:$Vd,108:$Ve},o($V81,[2,46],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:14,18:15,19:16,20:17,21:18,32:22,4:276,2:$V0,16:$V1,26:$V2,27:$V3,31:$V4,37:$V5,41:$V6,44:$V7,45:$V8,46:$V9,50:$Va,56:$Vb,57:$Vc,58:$Vd,108:$Ve}),o($V81,[2,44],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:14,18:15,19:16,20:17,21:18,32:22,4:277,2:$V0,16:$V1,26:$V2,27:$V3,31:$V4,37:$V5,41:$V6,44:$V7,45:$V8,46:$V9,50:$Va,56:$Vb,57:$Vc,58:$Vd,108:$Ve}),{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,17:14,18:15,19:16,20:17,21:18,25:[2,48],26:$V2,27:$V3,31:$V4,32:22,37:$V5,41:$V6,44:$V7,45:$V8,46:$V9,50:$Va,56:$Vb,57:$Vc,58:$Vd,108:$Ve},o($V81,[2,45],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:14,18:15,19:16,20:17,21:18,32:22,6:35,2:$V0,16:$V1,26:$V2,27:$V3,31:$V4,37:$V5,41:$V6,44:$V7,45:$V8,46:$V9,50:$Va,56:$Vb,57:$Vc,58:$Vd,108:$Ve}),o($V81,[2,43],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:14,18:15,19:16,20:17,21:18,32:22,6:35,2:$V0,16:$V1,26:$V2,27:$V3,31:$V4,37:$V5,41:$V6,44:$V7,45:$V8,46:$V9,50:$Va,56:$Vb,57:$Vc,58:$Vd,108:$Ve})],
defaultActions: {34:[2,1],246:[2,40],247:[2,41]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const CL_Error = require('../build/Errores/L_Error');
    const CN_Error = require('../build/Errores/N_Error');
    const { LPrimitivo } = require('../build/Literal/Primitivo');
    const { Cadenat } = require('../build/Literal/Cadena');
    const { Tipos, Tipo, TipoDato, TipoRelacional } = require('../build/Otros/Tipos');
    const {Statement} = require('../build/Instrucciones/Statement');

    const { Mast } = require('../build/Expresiones/Aritmeticas/Mas');
    const { Menost } = require('../build/Expresiones/Aritmeticas/Menos');
    const { Mult } = require('../build/Expresiones/Aritmeticas/Mult');
    const { Divt } = require('../build/Expresiones/Aritmeticas/Div');
    const { Unariot } = require('../build/Expresiones/Aritmeticas/Unario');
    const { Modt } = require('../build/Expresiones/Aritmeticas/Mod');
    const { Pott } = require('../build/Expresiones/Aritmeticas/Potencia');
    const { AsigId } = require('../build/Expresiones/Asignaciones/Asigid');
    const { AccesoId } = require('../build/Expresiones/AccesoId');
    const { ExpFunc } = require('../build/Expresiones/ExpFunc');

    const { Tolower } = require('../build/Expresiones/Opestring/Tolower');
    const { ToUpper } = require('../build/Expresiones/Opestring/Toupper');
    const { Concat } = require('../build/Expresiones/Opestring/Concat');
    const { CharAt } = require('../build/Expresiones/Opestring/Charat');
    const { StrLength } = require('../build/Expresiones/Opestring/Strlength');

    const { MayoryMenort } = require('../build/Expresiones/Relacionales/MayoryMenor');
    const { Igualt } = require('../build/Expresiones/Relacionales/Igual');
    const { Notigualt } = require('../build/Expresiones/Relacionales/Notigual');
    const { Andt } = require('../build/Expresiones/Logicas/Andt');
    const { Nott } = require('../build/Expresiones/Logicas/Nott');
    const { Ort } = require('../build/Expresiones/Logicas/Ort');
    const {Opeternario} = require('../build/Expresiones/Opeternario');

    const { Declaracion } = require('../build/Instrucciones/Declaracion');
    const {Asignacion} = require('../build/Instrucciones/Asignacion');
    const { Imprimirt } = require('../build/Instrucciones/Imprimir');
    const {Ifelse} = require('../build/Instrucciones/Ifelse');
    const {While} = require('../build/Instrucciones/While');
    const {Dowhile} = require('../build/Instrucciones/Dowhile');
    const {For} = require('../build/Instrucciones/For/For');
    const {Forin} = require('../build/Instrucciones/For/Forin');
    const {Forof} = require('../build/Instrucciones/For/Forof');
    const { SwitchCase, Case } = require('../build/Instrucciones/Switch');

    const { Paramfunc } = require('../build/Instrucciones/Funciones/Parametrosfunc');
    const { Funciont } = require('../build/Instrucciones/Funciones/Funciont');
    const {Llamarfuncion} = require('../build/Instrucciones/Call');

    const {Break} = require('../build/Instrucciones/Break');
    const {Continue} = require('../build/Instrucciones/Continue');
    const { Inct } = require('../build/Instrucciones/IncyDec/Inc');
    const { Dect } = require('../build/Instrucciones/IncyDec/Dec');
    const {Returnt} = require('../build/Instrucciones/Returnt');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario de una linea
break;
case 2:/*Comentario multilinea*/
break;
case 3:return 26
break;
case 4:return 31
break;
case 5:return 64
break;
case 6:return 63
break;
case 7:return 65
break;
case 8:return 66
break;
case 9:return 104
break;
case 10:return 41
break;
case 11:return 43
break;
case 12:return 50
break;
case 13:return 53
break;
case 14:return 55
break;
case 15:return 44
break;
case 16:return 45
break;
case 17:return 46
break;
case 18:return 57
break;
case 19:return 108
break;
case 20:return 56
break;
case 21:return 58
break;
case 22:return 37
break;
case 23:return 'tk_graficar_ts'
break;
case 24:return 'tk_type'
break;
case 25:return 67
break;
case 26:return 'tk_push'
break;
case 27:return 'tk_pop'
break;
case 28:return 100
break;
case 29:return 48
break;
case 30:return 49
break;
case 31:return 95
break;
case 32:return 96
break;
case 33:return 97
break;
case 34:return 99
break;
case 35:return 89
break;
case 36:return 90
break;
case 37:return 87
break;
case 38:return 69
break;
case 39:return 88
break;
case 40:return 68 
break;
case 41:return 91
break;
case 42:return 92
break;
case 43:return 93
break;
case 44:return 35
break;
case 45:return 36
break;
case 46:return 24
break;
case 47:return 25
break;
case 48:return 22
break;
case 49:return 33
break;
case 50:return 38
break;
case 51:return 40
break;
case 52:return 62
break;
case 53:return 54
break;
case 54:return 70
break;
case 55:return 72
break;
case 56:return 73
break;
case 57:return 80
break;
case 58:return 103
break;
case 59:return 102
break;
case 60:return 101
break;
case 61: yy_.yytext = yy_.yytext.slice(1,-1).replace(/\\n/g, "\n").replace(/\\t/g, "\t").replace(/\\r/g, "\r").replace(/\\\\/g, "\\").replace(/\\\"/g, "\""); return 106;
break;
case 62:return 27; 
break;
case 63:return 85
break;
case 64:return 81
break;
case 65:return 82
break;
case 66:return 83
break;
case 67:return 84
break;
case 68:return 86
break;
case 69: /*se ignoran*/ 
break;
case 70:  return 5;   
break;
case 71:CL_Error.L_Errores.push(new CN_Error.N_Error("Lexico",yy_.yytext,"",yy_.yylineno,yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:function\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:type\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:toLowerCase\b)/,/^(?:toUpperCase\b)/,/^(?:concat\b)/,/^(?:charAt\b)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?:true|false\b)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:[\"|\']([^\"\n]|(\\"))*[\"|\'])/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[ \t\r\n\f])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}